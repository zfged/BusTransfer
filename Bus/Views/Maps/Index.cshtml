
@{

    ViewBag.Title = "maps";

    var count = 0;
}
@model IEnumerable<Bus.Models.Client>
@if (Model.Count() != 0)
{
    <script src="https://api-maps.yandex.ru/2.1/?lang=ru_RU" type="text/javascript"></script>
    <script src="https://yandex.st/jquery/2.2.3/jquery.min.js" type="text/javascript"></script>
    <script type="text/javascript">
        window.MyCoords = [];
       @if (ViewBag.coordsType == false)
       {
            foreach (var item in Model)
            {
                @Html.Raw("window.MyCoords["+count+"] = [" + item.CoordsFromR + "];");
               count++;
            }
       }
       else
       {
            foreach (var item in Model)
            {
                @Html.Raw("window.MyCoords[" + count + "] = [" + item.CoordsToR + "];");
               count++;
            }
       }
       // Try HTML5 geolocation.
       if (navigator.geolocation) {
           navigator.geolocation.getCurrentPosition(function (position) {
               debugger;



               window.readyMas = [];
               var sorteditems = [];

               window.MyCoordsStart = [position.coords.latitude, position.coords.longitude];





               //получаем для каждого удаленность
               window.MyCoords.forEach(getLength);
               //сортируем по удаленности. сначала самые ближние. Если поставить {return b.len - a.len;}, то будут сначала самые дальние
               window.res = sorteditems.sort(function compare(a, b) { return a.len - b.len; });

               debugger;
               console.log(res[0].item);
               console.log(window.MyCoordsStart);

               for (var i = 0; i < res.length; i++)
               {

                    window.readyMas[i] = res[i].item;

               }

               window.readyMas.unshift(window.MyCoordsStart);


               //вот тут описано, как получаем для каждого удаленность
               function getLength(item, index, array) {
                   var len = Math.sqrt(Math.pow(item[0] - position.coords.latitude, 2) + Math.pow(item[1] - position.coords.longitude, 2));
                   sorteditems.push({ item, len });
               }




           }, function () {
               handleLocationError(true, infoWindow, map.getCenter());
           });
       } else {
           // Browser doesn't support Geolocation
           handleLocationError(false, infoWindow, map.getCenter());
       }


        function handleLocationError(browserHasGeolocation, infoWindow, pos) {
            infoWindow.setPosition(pos);
            infoWindow.setContent(browserHasGeolocation ?
                'Error: The Geolocation service failed.' :
                'Error: Your browser doesn\'t support geolocation.');
        }



        ymaps.ready(init);

        function init() {




                          debugger;
                         var myMap = new ymaps.Map("map", {
                             center: window.MyCoordsStart,
                             zoom: 13
                         }, {
                                 searchControlProvider: 'yandex#search'
                             });

                         ymaps.route(

                             window.readyMas

                         ).then(function (route) {
                             myMap.geoObjects.add(route);
                             // Зададим содержание иконок начальной и конечной точкам маршрута.
                             // С помощью метода getWayPoints() получаем массив точек маршрута.
                             // Массив транзитных точек маршрута можно получить с помощью метода getViaPoints.
                             var points = route.getWayPoints(),
                                 lastPoint = points.getLength() - 1;
                             // Задаем стиль метки - иконки будут красного цвета, и
                             // их изображения будут растягиваться под контент.
                             points.options.set('preset', 'islands#redStretchyIcon');
                             // Задаем контент меток в начальной и конечной точках.
                             points.get(0).properties.set('iconContent', 'Точка отправления');
                             points.get(lastPoint).properties.set('iconContent', 'Точка прибытия');

                             // Проанализируем маршрут по сегментам.
                             // Сегмент - участок маршрута, который нужно проехать до следующего
                             // изменения направления движения.
                             // Для того, чтобы получить сегменты маршрута, сначала необходимо получить
                             // отдельно каждый путь маршрута.
                             // Весь маршрут делится на два пути:
                             // 1) от улицы Крылатские холмы до станции "Кунцевская";
                             // 2) от станции "Кунцевская" до "Пионерская".

                             var moveList = 'Трогаемся,</br>',
                                 way,
                                 segments;
                             // Получаем массив путей.
                             for (var i = 0; i < route.getPaths().getLength(); i++) {
                                 way = route.getPaths().get(i);
                                 segments = way.getSegments();
                                 for (var j = 0; j < segments.length; j++) {
                                     var street = segments[j].getStreet();
                                     moveList += ('Едем ' + segments[j].getHumanAction() + (street ? ' на ' + street : '') + ', проезжаем ' + segments[j].getLength() + ' м.,');
                                     moveList += '</br>'
                                 }
                             }
                             moveList += 'Останавливаемся.';
                             // Выводим маршрутный лист.
                             $('#list').append(moveList);
                         }, function (error) {
                             alert('Возникла ошибка: ' + error.message);
                         });



        }


    </script>
    <style>
        body, html {
            padding: 0;
            margin: 0;
            width: 100%;
            height: 100%;
            font-family: Arial;
            font-size: 14px;
        }

        #list {
            padding: 10px;
        }

        #map {
            margin-top: 200px;
            width: 100%;
            height: 200px;
        }
    </style>
    <div id="map"></div>
        <div id="list"></div>
}
else
{
    <div id="cartMessage"><h1 style="color:red">На данный рейс карт не найдено</h1></div>
    <style>
        * {
            margin: 0;
            padding: 0;
        }

        body, html {
            height: 100%;
        }

        #cartMessage {
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100%;
        }
    </style>
}
